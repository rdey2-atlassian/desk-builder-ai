import { 
  Plane, 
  Sparkles, 
  Users, 
  Building2, 
  HardDrive,
  FileQuestion,
  Globe,
  FileText,
  Book,
  Zap,
  Settings,
  Shield,
  UsersRound,
  BookOpen,
  Clock,
  AlertTriangle,
  Activity,
  RefreshCw
} from "lucide-react";
import { SolutionTemplate } from "@/types/templates";

export const solutionTemplates: SolutionTemplate[] = [
  {
    id: "blank",
    name: "Blank Solution",
    description: "Start from scratch with an empty canvas",
    icon: FileQuestion,
    category: "blank",
    blocks: [],
  },
  {
    id: "travel-helpdesk",
    name: "Travel Helpdesk",
    description: "Corporate travel management & support",
    icon: Plane,
    category: "itsm",
    prompt: "Create a Travel Helpdesk for Atlassian (500 employees). Mac-heavy. Use Okta, Slack, Confluence. Integrate Concur Travel if available.",
    blueprintPath: "/data/blueprint.json",
    blocks: [
      {
        id: "portal",
        label: "Portal & Channels",
        icon: Globe,
        type: "portal",
        details: ["Travel Desk portal scaffolded", "Email intake enabled"],
      },
      {
        id: "request_types",
        label: "Request Types",
        icon: FileText,
        type: "request_types",
        details: ["6 travel-specific types seeded", "Forms + routing configured"],
        dataPath: "/data/requestTypes.json",
      },
      {
        id: "knowledge",
        label: "Knowledge Hub",
        icon: Book,
        type: "knowledge",
        details: ["10 starter articles created", "Policy snippets attached"],
        dataPath: "/data/knowledge.json",
      },
      {
        id: "integrations",
        label: "Integrations",
        icon: Zap,
        type: "integrations",
        details: [
          "Okta connected (SSO + approvals)",
          "Slack connected (#travel-hotline)",
          "Confluence connected (KB)",
          "Concur pending",
          "Email inbound set",
        ],
      },
      {
        id: "automations",
        label: "Automations",
        icon: Settings,
        type: "automations",
        details: [
          "Routing rules configured",
          "Approval workflows set",
          "Deadline/risk escalation",
          "P1 paging enabled",
        ],
      },
      {
        id: "slas",
        label: "SLAs",
        icon: Clock,
        type: "slas",
        details: ["P1 & Standard tiers configured", "Calendar-aware"],
      },
      {
        id: "team_roles",
        label: "Team & Roles",
        icon: UsersRound,
        type: "team_roles",
        details: ["3 roles defined (Owner, Agent, Viewer)", "Travel Desk team created"],
      },
    ],
  },
  {
    id: "it-operations",
    name: "IT Operations",
    description: "Incident & operations management",
    icon: Sparkles,
    category: "itops",
    prompt: "Create an IT Operations desk to manage incidents, on-call schedules, and playbooks for a 200-person engineering team.",
    blueprintPath: "/data/itops/blueprint.json",
    blocks: [
      {
        id: "roles",
        label: "Roles & Permissions",
        icon: Shield,
        type: "roles",
        details: ["4 roles defined", "RBAC configured"],
        dataPath: "/data/itops/roles.json",
      },
      {
        id: "playbooks",
        label: "Playbooks",
        icon: BookOpen,
        type: "playbooks",
        details: ["5 incident playbooks", "Runbook templates"],
        dataPath: "/data/itops/playbooks.json",
      },
      {
        id: "schedules",
        label: "On-Call Schedules",
        icon: Clock,
        type: "schedules",
        details: ["24x7 follow-the-sun", "Escalation chains"],
        dataPath: "/data/itops/schedules.json",
      },
      {
        id: "escalations",
        label: "Escalation Policies",
        icon: AlertTriangle,
        type: "escalations",
        details: ["P1/P2 escalation rules", "Time-based triggers"],
        dataPath: "/data/itops/escalations.json",
      },
      {
        id: "integrations",
        label: "Integrations",
        icon: Zap,
        type: "integrations",
        details: [
          "Datadog connected",
          "PagerDuty linked",
          "Slack alerts",
          "Jira sync",
          "StatusPage updates",
        ],
        dataPath: "/data/itops/integrations.json",
      },
      {
        id: "heartbeats",
        label: "Heartbeats & Monitors",
        icon: Activity,
        type: "heartbeats",
        details: ["8 heartbeats configured", "Health checks active"],
        dataPath: "/data/itops/heartbeats.json",
      },
      {
        id: "syncs",
        label: "Data Syncs",
        icon: RefreshCw,
        type: "syncs",
        details: ["Alert ingestion", "Asset sync", "User directory"],
        dataPath: "/data/itops/syncs.json",
      },
    ],
  },
  {
    id: "hr-onboarding",
    name: "HR Onboarding (Joiner)",
    description: "Employee onboarding & provisioning",
    icon: Users,
    category: "hrsm",
    prompt: "Create an HR Onboarding solution for new hires in India and US with Workday, Okta, Intune, and DocuSign integrations.",
    blocks: [
      {
        id: "portal",
        label: "HR Portal",
        icon: Globe,
        type: "portal",
        details: ["New hire portal", "Manager dashboard"],
      },
      {
        id: "request_types",
        label: "Request Types",
        icon: FileText,
        type: "request_types",
        details: ["Onboarding forms", "Access requests", "Equipment orders"],
      },
      {
        id: "workflows",
        label: "Workflows & Journeys",
        icon: Settings,
        type: "workflows",
        details: ["Pre-boarding", "Day 1", "30/60/90 check-ins"],
      },
      {
        id: "integrations",
        label: "Integrations",
        icon: Zap,
        type: "integrations",
        details: ["Workday (HRIS)", "Okta (Identity)", "Intune (MDM)", "DocuSign (e-Sign)"],
      },
    ],
  },
  {
    id: "facilities",
    name: "Facilities Work Orders",
    description: "Space & maintenance management",
    icon: Building2,
    category: "facilities",
    prompt: "Create a Facilities solution for work orders, preventive maintenance, and space management.",
    blocks: [
      {
        id: "portal",
        label: "Facilities Portal",
        icon: Globe,
        type: "portal",
        details: ["Work order submission", "Space booking"],
      },
      {
        id: "catalog",
        label: "Service Catalog",
        icon: FileText,
        type: "catalog",
        details: ["Maintenance requests", "Space changes", "Equipment moves"],
      },
      {
        id: "workflows",
        label: "Workflows",
        icon: Settings,
        type: "workflows",
        details: ["WO lifecycle", "PM schedules", "Escalations"],
      },
    ],
  },
  {
    id: "sam-lite",
    name: "Software Asset Management",
    description: "License tracking & reclaim automation",
    icon: HardDrive,
    category: "sam",
    prompt: "Create a Software Asset Management solution to track licenses, usage, and automate reclaim workflows.",
    blocks: [
      {
        id: "entities",
        label: "Asset Entities",
        icon: FileText,
        type: "entities",
        details: ["Software entitlements", "Usage tracking"],
      },
      {
        id: "automations",
        label: "Reclaim Automation",
        icon: Settings,
        type: "automations",
        details: ["Unused license detection", "Reclaim workflows"],
      },
      {
        id: "analytics",
        label: "Analytics",
        icon: Activity,
        type: "analytics",
        details: ["Cost tracking", "ROI dashboards"],
      },
    ],
  },
];

export const getTemplateById = (id: string): SolutionTemplate | undefined => {
  return solutionTemplates.find(t => t.id === id);
};
