import {
  Database,
  Link,
  Package,
  Shield,
  GitBranch,
  Route,
  CheckCircle,
  AlertTriangle,
  FileText,
  Layout,
  Zap,
  PlaySquare,
  BookOpen,
  Webhook,
  Users,
  Briefcase,
  Smartphone,
  FileSignature,
  Wrench,
  Plug,
  Brain,
  MessageSquare,
  BookMarked,
  Search,
  LayoutGrid,
  PieChart,
  BarChart3,
  Bell,
  Lock,
  Globe,
  FileWarning,
  TestTube,
  Activity,
  ClipboardList
} from "lucide-react";
import { BlockDefinition } from "@/types/blocks";

export const blockDefinitions: BlockDefinition[] = [
  // DOMAIN BLOCKS
  {
    type: "entity",
    name: "Entity",
    description: "Define a data entity with fields and types",
    category: "domain",
    icon: Database,
    color: "hsl(var(--primary))",
    tags: ["data", "model", "schema"],
    parameters: [
      { id: "name", label: "Entity Name", type: "text", required: true, placeholder: "Employee" },
      { id: "description", label: "Description", type: "textarea", required: false },
      { id: "fields", label: "Fields (JSON)", type: "json", required: true, defaultValue: "[]" },
    ],
  },
  {
    type: "relationship",
    name: "Relationship",
    description: "Connect entities with relationships",
    category: "domain",
    icon: Link,
    color: "hsl(var(--primary))",
    tags: ["data", "model", "relation"],
    parameters: [
      { id: "from", label: "From Entity", type: "text", required: true },
      { id: "to", label: "To Entity", type: "text", required: true },
      { id: "type", label: "Type", type: "select", required: true, options: [
        { label: "One to One", value: "one-to-one" },
        { label: "One to Many", value: "one-to-many" },
        { label: "Many to Many", value: "many-to-many" },
      ]},
    ],
  },
  {
    type: "field_pack",
    name: "Field Pack",
    description: "Reusable field collections (PII, Device, etc.)",
    category: "domain",
    icon: Package,
    color: "hsl(var(--primary))",
    tags: ["data", "reusable", "template"],
    parameters: [
      { id: "name", label: "Pack Name", type: "text", required: true },
      { id: "fields", label: "Fields (JSON)", type: "json", required: true, defaultValue: "[]" },
    ],
  },
  {
    type: "record_security",
    name: "Record Security",
    description: "Row/field-level visibility by role",
    category: "domain",
    icon: Shield,
    color: "hsl(var(--primary))",
    tags: ["security", "access", "rbac"],
    parameters: [
      { id: "entity", label: "Entity", type: "text", required: true },
      { id: "rules", label: "Security Rules (JSON)", type: "json", required: true, defaultValue: "[]" },
    ],
  },

  // WORKFLOW BLOCKS
  {
    type: "workflow",
    name: "Workflow",
    description: "States, transitions, and SLAs",
    category: "workflow",
    icon: GitBranch,
    color: "hsl(220 70% 50%)",
    tags: ["process", "states", "transitions"],
    parameters: [
      { id: "name", label: "Workflow Name", type: "text", required: true },
      { id: "states", label: "States (JSON)", type: "json", required: true, defaultValue: "[]" },
      { id: "transitions", label: "Transitions (JSON)", type: "json", required: true, defaultValue: "[]" },
    ],
  },
  {
    type: "journey",
    name: "Journey",
    description: "Multi-stage user journeys",
    category: "workflow",
    icon: Route,
    color: "hsl(220 70% 50%)",
    tags: ["process", "stages", "onboarding"],
    parameters: [
      { id: "name", label: "Journey Name", type: "text", required: true },
      { id: "stages", label: "Stages (JSON)", type: "json", required: true, defaultValue: "[]" },
    ],
  },
  {
    type: "approval",
    name: "Approval Pattern",
    description: "Reusable approval chains",
    category: "workflow",
    icon: CheckCircle,
    color: "hsl(220 70% 50%)",
    tags: ["approval", "chain", "workflow"],
    parameters: [
      { id: "name", label: "Approval Name", type: "text", required: true },
      { id: "chain", label: "Approval Chain (JSON)", type: "json", required: true, defaultValue: "[]" },
    ],
  },
  {
    type: "escalation",
    name: "Escalation Pattern",
    description: "Time/signal/risk-based escalations",
    category: "workflow",
    icon: AlertTriangle,
    color: "hsl(220 70% 50%)",
    tags: ["escalation", "sla", "alerts"],
    parameters: [
      { id: "name", label: "Escalation Name", type: "text", required: true },
      { id: "triggers", label: "Triggers (JSON)", type: "json", required: true, defaultValue: "[]" },
    ],
  },

  // CATALOG BLOCKS
  {
    type: "catalog_item",
    name: "Catalog Item",
    description: "Service catalog item with form",
    category: "catalog",
    icon: FileText,
    color: "hsl(160 60% 45%)",
    tags: ["catalog", "service", "form"],
    parameters: [
      { id: "name", label: "Item Name", type: "text", required: true },
      { id: "description", label: "Description", type: "textarea", required: false },
      { id: "form", label: "Form Schema (JSON)", type: "json", required: true, defaultValue: "{}" },
    ],
  },
  {
    type: "form_section",
    name: "Form Section",
    description: "Reusable form sections",
    category: "catalog",
    icon: Layout,
    color: "hsl(160 60% 45%)",
    tags: ["form", "reusable", "section"],
    parameters: [
      { id: "name", label: "Section Name", type: "text", required: true },
      { id: "fields", label: "Fields (JSON)", type: "json", required: true, defaultValue: "[]" },
    ],
  },
  {
    type: "dynamic_logic",
    name: "Dynamic Logic",
    description: "Show/hide/require rules",
    category: "catalog",
    icon: Zap,
    color: "hsl(160 60% 45%)",
    tags: ["form", "logic", "conditional"],
    parameters: [
      { id: "name", label: "Logic Name", type: "text", required: true },
      { id: "rules", label: "Rules (JSON)", type: "json", required: true, defaultValue: "[]" },
    ],
  },

  // AUTOMATION BLOCKS
  {
    type: "rule",
    name: "Rule",
    description: "If/then automation rules",
    category: "automation",
    icon: Zap,
    color: "hsl(280 70% 50%)",
    tags: ["automation", "rules", "if-then"],
    parameters: [
      { id: "name", label: "Rule Name", type: "text", required: true },
      { id: "condition", label: "Condition (JSON)", type: "json", required: true, defaultValue: "{}" },
      { id: "action", label: "Action (JSON)", type: "json", required: true, defaultValue: "{}" },
    ],
  },
  {
    type: "task_graph",
    name: "Task Graph",
    description: "Serial/parallel task orchestration",
    category: "automation",
    icon: PlaySquare,
    color: "hsl(280 70% 50%)",
    tags: ["automation", "tasks", "orchestration"],
    parameters: [
      { id: "name", label: "Graph Name", type: "text", required: true },
      { id: "tasks", label: "Tasks (JSON)", type: "json", required: true, defaultValue: "[]" },
    ],
  },
  {
    type: "runbook",
    name: "Runbook",
    description: "Scripted action sequences",
    category: "automation",
    icon: BookOpen,
    color: "hsl(280 70% 50%)",
    tags: ["automation", "runbook", "script"],
    parameters: [
      { id: "name", label: "Runbook Name", type: "text", required: true },
      { id: "steps", label: "Steps (JSON)", type: "json", required: true, defaultValue: "[]" },
    ],
  },
  {
    type: "event_hook",
    name: "Event Hook",
    description: "Webhooks and scheduled triggers",
    category: "automation",
    icon: Webhook,
    color: "hsl(280 70% 50%)",
    tags: ["webhook", "event", "trigger"],
    parameters: [
      { id: "name", label: "Hook Name", type: "text", required: true },
      { id: "type", label: "Type", type: "select", required: true, options: [
        { label: "Webhook", value: "webhook" },
        { label: "Schedule", value: "schedule" },
      ]},
      { id: "config", label: "Config (JSON)", type: "json", required: true, defaultValue: "{}" },
    ],
  },

  // ADAPTER BLOCKS
  {
    type: "adapter_identity",
    name: "Identity Adapter",
    description: "Okta/AAD integration",
    category: "adapter",
    icon: Users,
    color: "hsl(30 90% 50%)",
    tags: ["integration", "identity", "okta", "aad"],
    parameters: [
      { id: "name", label: "Adapter Name", type: "text", required: true },
      { id: "provider", label: "Provider", type: "select", required: true, options: [
        { label: "Okta", value: "okta" },
        { label: "Azure AD", value: "azure-ad" },
      ]},
      { id: "credentials", label: "Credentials (Secret)", type: "text", required: true },
    ],
  },
  {
    type: "adapter_hris",
    name: "HRIS Adapter",
    description: "Workday/SuccessFactors integration",
    category: "adapter",
    icon: Briefcase,
    color: "hsl(30 90% 50%)",
    tags: ["integration", "hris", "workday"],
    parameters: [
      { id: "name", label: "Adapter Name", type: "text", required: true },
      { id: "provider", label: "Provider", type: "select", required: true, options: [
        { label: "Workday", value: "workday" },
        { label: "SuccessFactors", value: "successfactors" },
      ]},
      { id: "credentials", label: "Credentials (Secret)", type: "text", required: true },
    ],
  },
  {
    type: "adapter_mdm",
    name: "MDM Adapter",
    description: "Intune/Jamf device management",
    category: "adapter",
    icon: Smartphone,
    color: "hsl(30 90% 50%)",
    tags: ["integration", "mdm", "intune", "jamf"],
    parameters: [
      { id: "name", label: "Adapter Name", type: "text", required: true },
      { id: "provider", label: "Provider", type: "select", required: true, options: [
        { label: "Intune", value: "intune" },
        { label: "Jamf", value: "jamf" },
      ]},
      { id: "credentials", label: "Credentials (Secret)", type: "text", required: true },
    ],
  },
  {
    type: "adapter_esign",
    name: "eSign Adapter",
    description: "DocuSign/Adobe Sign integration",
    category: "adapter",
    icon: FileSignature,
    color: "hsl(30 90% 50%)",
    tags: ["integration", "esign", "docusign"],
    parameters: [
      { id: "name", label: "Adapter Name", type: "text", required: true },
      { id: "provider", label: "Provider", type: "select", required: true, options: [
        { label: "DocuSign", value: "docusign" },
        { label: "Adobe Sign", value: "adobe-sign" },
      ]},
      { id: "credentials", label: "Credentials (Secret)", type: "text", required: true },
    ],
  },
  {
    type: "adapter_cmms",
    name: "CMMS/CAFM Adapter",
    description: "Facilities management integration",
    category: "adapter",
    icon: Wrench,
    color: "hsl(30 90% 50%)",
    tags: ["integration", "facilities", "cmms"],
    parameters: [
      { id: "name", label: "Adapter Name", type: "text", required: true },
      { id: "provider", label: "Provider", type: "text", required: true },
      { id: "credentials", label: "Credentials (Secret)", type: "text", required: true },
    ],
  },
  {
    type: "adapter_generic",
    name: "Generic Adapter",
    description: "Custom REST API adapter",
    category: "adapter",
    icon: Plug,
    color: "hsl(30 90% 50%)",
    tags: ["integration", "api", "custom"],
    parameters: [
      { id: "name", label: "Adapter Name", type: "text", required: true },
      { id: "baseUrl", label: "Base URL", type: "text", required: true },
      { id: "auth", label: "Auth Config (JSON)", type: "json", required: true, defaultValue: "{}" },
    ],
  },

  // AI & KNOWLEDGE BLOCKS
  {
    type: "intent_router",
    name: "Intent Router",
    description: "Route requests by intent",
    category: "automation",
    icon: Brain,
    color: "hsl(260 70% 50%)",
    tags: ["ai", "nlp", "routing"],
    parameters: [
      { id: "name", label: "Router Name", type: "text", required: true },
      { id: "intents", label: "Intents (JSON)", type: "json", required: true, defaultValue: "[]" },
    ],
  },
  {
    type: "summarizer",
    name: "Summarizer/Composer",
    description: "AI summaries and drafts",
    category: "automation",
    icon: MessageSquare,
    color: "hsl(260 70% 50%)",
    tags: ["ai", "summary", "generation"],
    parameters: [
      { id: "name", label: "Summarizer Name", type: "text", required: true },
      { id: "prompt", label: "Prompt Template", type: "textarea", required: true },
    ],
  },
  {
    type: "policy_pack",
    name: "Policy Pack",
    description: "HR/Facilities policy templates",
    category: "automation",
    icon: BookMarked,
    color: "hsl(260 70% 50%)",
    tags: ["ai", "policy", "knowledge"],
    parameters: [
      { id: "name", label: "Pack Name", type: "text", required: true },
      { id: "policies", label: "Policies (JSON)", type: "json", required: true, defaultValue: "[]" },
    ],
  },
  {
    type: "retrieval_connector",
    name: "Retrieval Connector",
    description: "Connect to knowledge bases",
    category: "automation",
    icon: Search,
    color: "hsl(260 70% 50%)",
    tags: ["ai", "knowledge", "confluence"],
    parameters: [
      { id: "name", label: "Connector Name", type: "text", required: true },
      { id: "source", label: "Source", type: "select", required: true, options: [
        { label: "Confluence", value: "confluence" },
        { label: "SharePoint", value: "sharepoint" },
      ]},
      { id: "config", label: "Config (JSON)", type: "json", required: true, defaultValue: "{}" },
    ],
  },

  // PORTAL BLOCKS
  {
    type: "portal_section",
    name: "Portal Section",
    description: "Portal page sections",
    category: "portal",
    icon: LayoutGrid,
    color: "hsl(200 70% 50%)",
    tags: ["portal", "ui", "section"],
    parameters: [
      { id: "name", label: "Section Name", type: "text", required: true },
      { id: "widgets", label: "Widgets (JSON)", type: "json", required: true, defaultValue: "[]" },
    ],
  },
  {
    type: "widget",
    name: "Widget",
    description: "Reusable UI widgets",
    category: "portal",
    icon: PieChart,
    color: "hsl(200 70% 50%)",
    tags: ["portal", "ui", "widget"],
    parameters: [
      { id: "name", label: "Widget Name", type: "text", required: true },
      { id: "type", label: "Type", type: "select", required: true, options: [
        { label: "Status Tiles", value: "status-tiles" },
        { label: "Journey Timeline", value: "journey-timeline" },
        { label: "My Assets", value: "my-assets" },
      ]},
    ],
  },
  {
    type: "branding",
    name: "Branding Theme",
    description: "Colors, logo, typography",
    category: "portal",
    icon: ClipboardList,
    color: "hsl(200 70% 50%)",
    tags: ["portal", "theme", "branding"],
    parameters: [
      { id: "name", label: "Theme Name", type: "text", required: true },
      { id: "colors", label: "Colors (JSON)", type: "json", required: true, defaultValue: "{}" },
    ],
  },
  {
    type: "personas",
    name: "Personas & Navigation",
    description: "Role-based navigation",
    category: "portal",
    icon: Users,
    color: "hsl(200 70% 50%)",
    tags: ["portal", "navigation", "rbac"],
    parameters: [
      { id: "name", label: "Persona Name", type: "text", required: true },
      { id: "menu", label: "Menu Items (JSON)", type: "json", required: true, defaultValue: "[]" },
    ],
  },

  // ANALYTICS BLOCKS
  {
    type: "metric",
    name: "Metric Definition",
    description: "Define business metrics",
    category: "analytics",
    icon: BarChart3,
    color: "hsl(140 60% 45%)",
    tags: ["analytics", "metric", "kpi"],
    parameters: [
      { id: "name", label: "Metric Name", type: "text", required: true },
      { id: "formula", label: "Formula", type: "text", required: true },
    ],
  },
  {
    type: "dashboard",
    name: "Dashboard",
    description: "Analytics dashboards",
    category: "analytics",
    icon: LayoutGrid,
    color: "hsl(140 60% 45%)",
    tags: ["analytics", "dashboard", "reporting"],
    parameters: [
      { id: "name", label: "Dashboard Name", type: "text", required: true },
      { id: "widgets", label: "Widgets (JSON)", type: "json", required: true, defaultValue: "[]" },
    ],
  },
  {
    type: "alert",
    name: "Alert",
    description: "Threshold-based alerts",
    category: "analytics",
    icon: Bell,
    color: "hsl(140 60% 45%)",
    tags: ["analytics", "alert", "monitoring"],
    parameters: [
      { id: "name", label: "Alert Name", type: "text", required: true },
      { id: "condition", label: "Condition", type: "text", required: true },
      { id: "channel", label: "Channel", type: "select", required: true, options: [
        { label: "Email", value: "email" },
        { label: "Slack", value: "slack" },
      ]},
    ],
  },

  // SECURITY BLOCKS
  {
    type: "rbac_pack",
    name: "RBAC Pack",
    description: "Role-based access control",
    category: "security",
    icon: Lock,
    color: "hsl(0 70% 50%)",
    tags: ["security", "rbac", "roles"],
    parameters: [
      { id: "name", label: "Pack Name", type: "text", required: true },
      { id: "roles", label: "Roles (JSON)", type: "json", required: true, defaultValue: "[]" },
    ],
  },
  {
    type: "data_residency",
    name: "Data Residency",
    description: "Data zones and retention",
    category: "security",
    icon: Globe,
    color: "hsl(0 70% 50%)",
    tags: ["security", "compliance", "data"],
    parameters: [
      { id: "name", label: "Policy Name", type: "text", required: true },
      { id: "zones", label: "Zones (JSON)", type: "json", required: true, defaultValue: "[]" },
    ],
  },
  {
    type: "audit_log",
    name: "Audit Log",
    description: "Compliance audit logging",
    category: "security",
    icon: FileWarning,
    color: "hsl(0 70% 50%)",
    tags: ["security", "compliance", "audit"],
    parameters: [
      { id: "name", label: "Log Name", type: "text", required: true },
      { id: "events", label: "Tracked Events (JSON)", type: "json", required: true, defaultValue: "[]" },
    ],
  },

  // QUALITY BLOCKS
  {
    type: "seed_data",
    name: "Seed Data Generator",
    description: "Generate sample data",
    category: "quality",
    icon: TestTube,
    color: "hsl(180 60% 45%)",
    tags: ["testing", "data", "sample"],
    parameters: [
      { id: "name", label: "Generator Name", type: "text", required: true },
      { id: "count", label: "Sample Count", type: "number", required: true, defaultValue: 10 },
    ],
  },
  {
    type: "synthetic_test",
    name: "Synthetic E2E Test",
    description: "Automated journey testing",
    category: "quality",
    icon: Activity,
    color: "hsl(180 60% 45%)",
    tags: ["testing", "e2e", "quality"],
    parameters: [
      { id: "name", label: "Test Name", type: "text", required: true },
      { id: "steps", label: "Test Steps (JSON)", type: "json", required: true, defaultValue: "[]" },
    ],
  },
  {
    type: "diagnostics",
    name: "Diagnostics Panel",
    description: "Structured logging and diagnostics",
    category: "quality",
    icon: ClipboardList,
    color: "hsl(180 60% 45%)",
    tags: ["testing", "diagnostics", "logging"],
    parameters: [
      { id: "name", label: "Panel Name", type: "text", required: true },
      { id: "logLevel", label: "Log Level", type: "select", required: true, options: [
        { label: "Debug", value: "debug" },
        { label: "Info", value: "info" },
        { label: "Warning", value: "warning" },
        { label: "Error", value: "error" },
      ]},
    ],
  },
];

export const getBlockDefinitionByType = (type: string) => {
  return blockDefinitions.find(b => b.type === type);
};

export const getBlockDefinitionsByCategory = (category: string) => {
  return blockDefinitions.filter(b => b.category === category);
};
